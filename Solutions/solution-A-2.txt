1   How have if-blocks  been translated into GIMPLE  statements? Can you
    differentiate between conditional and unconditional gotos?

    If-blocks have been broken down  into distinct sections of code with
    labels. Control  transfer occurs with unconditional jumps (e.g. "goto X") 
    or conditional jumps (e.g. "if Z then goto X else goto Y").
    Thus by this above two examples we can differentiate between conditional and 
    unconditional gotos.


2   Repeat  the  above compilation,  but  now  asking for  another  dump
    that  of  the pass  "cfg".  View  this  pass  and say  whether  this
    representation makes it easier to  read and understand GIMPLEs. Draw
    the control-flow graph  of the program A-2.c on a  piece of paper by
    looking at the CFG dump.

    The control-flow  graph dump shows  distinct basic blocks  which are
    named sequentially. Basic blocks roughly correspond
    to  labels that  are created  during the  gimplification of  control
    statements.

output:

;; Function f (f, funcdef_no=0, decl_uid=1908, cgraph_uid=1, symbol_order=1)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
f ()
{
  int c;
  int b;
  int a;

  <bb 2> :
  a = Z;
  if (a <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  b = 5;
  c = 17;
  goto <bb 6>; [INV]

  <bb 4> :
  b = 6;
  c = 20;
  if (a == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  c = 0;

  <bb 6> :
  _1 = b * 10;
  _2 = c + _1;
  Z = _2;
  return;

}


