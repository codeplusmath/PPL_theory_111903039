
;; Function main (main, funcdef_no=1, decl_uid=2359, cgraph_uid=2, symbol_order=1) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
b_7 = b_2 + UNKNOWN
b_7 = &NONLOCAL
a_8 = a_1 + UNKNOWN
a_8 = &NONLOCAL
a_1 = &NONLOCAL
a_1 = a_8
b_2 = b_7
ESCAPED = &STRING
ESCAPED = &NONLOCAL
ESCAPED = b_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
printf = { }
main = { }
b_7 = { NONLOCAL }
b_2 = { NONLOCAL } same as b_7
a_8 = { NONLOCAL }
a_1 = { NONLOCAL } same as a_8


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int b;
  int a;

  <bb 2> [local count: 11059544]:
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 1062682282]:
  b_7 = b_2 * 2;
  a_8 = a_1 + 1;

  <bb 4> [local count: 1073741824]:
  # a_1 = PHI <4(2), a_8(3)>
  # b_2 = PHI <b_3(D)(2), b_7(3)>
  if (a_1 != 100)
    goto <bb 3>; [98.97%]
  else
    goto <bb 5>; [1.03%]

  <bb 5> [local count: 11059544]:
  printf ("%d%d", 100, b_2);
  return 0;

}


